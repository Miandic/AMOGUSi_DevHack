import logging
import sqlite3
import json
from aiogram import Bot, Dispatcher, executor, types
from difflib import SequenceMatcher
from keyboards import *


API_TOKEN = '5031794729:AAFJxxgyXcozo8nGm57ti-y8raMMMOVBj-o'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

con = sqlite3.connect('users.db')
cur = con.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS Filters
               (id INTEGER, item TEXT, city TEXT, max_price INTEGER, shop TEXT)''')

users = {}

SHOPS = [
    ['–î–ù–°', 'dns', True], ['–†–µ–≥–∞—Ä–¥', 'regard', True],
    ['–°–∏—Ç–∏–ª–∏–Ω–∫', 'citilink', True], ['–≠–ª—å–¥–æ—Ä–∞–¥–æ', 'eldorado', True],
]

with open('cities.json', encoding='utf-8') as f:
    cities_orig = json.loads(f.read())
    cities = [i.lower() for i in cities_orig]


with open('dns_cities.json', encoding='utf-8') as f:
    dns_cities = json.loads(f.read())


async def send_notifications():
    with open('sendedData.json', encoding='utf-8') as f:
        sended_data = json.load(f)
    for city in sended_data:
        for item in sended_data[city]:
            cur.execute(f'SELECT * FROM Filters WHERE shop = "{item["market"]}" AND item = "{item["name"]}" AND max_price >= {item["price"]}')

            for notification in cur.fetchall():
                if notification[3] == 1000000000:
                    text = f'{notification[1]} ‚Äî [{SHOP_NAMES[notification[4]]}, {cities_orig[cities.index(notification[2])]}]'
                else:
                    text = f'{notification[1]} ‚Äî [{SHOP_NAMES[notification[4]]}, {cities_orig[cities.index(notification[2])]}, {notification[3]}—Ä.]'
                text = text.replace("-", "\\-")
                notification = list(notification)
                notification[2] = notification[2].replace("-", "\\-")
                await bot.send_message(notification[0], f'–í–∞—à —Ñ–∏–ª—å—Ç—Ä\n`{text}`\n–°—Ä–∞–±–æ—Ç–∞–ª\\!\n\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ *{notification[1]}* –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ *{notification[2]}* \\({SHOP_NAMES[notification[4]]}\\) –ø–æ —Ü–µ–Ω–µ *{item["price"]}*—Ä\\.', parse_mode='MarkdownV2')
                cur.execute(f'DELETE FROM Filters WHERE id = {notification[0]} AND item = "{notification[1]}" AND max_price = {notification[3]} AND city = "{notification[2]}" AND shop = "{notification[4]}"')
                con.commit()


def find_similar(s):
    most_similar = 0
    city = ''

    s = s.lower()

    for i in cities:
        if s == i.lower():
            return True
        if most_similar < SequenceMatcher(lambda x: x==" ", i.lower(), s).ratio():
            most_similar = SequenceMatcher(lambda x: x==" ", i.lower(), s).ratio()
            city = i

    if SequenceMatcher(lambda x: x==" ", city.lower(), s).ratio() < 0.8:
        return False
    return city


def send_json():
    cur.execute(f'SELECT city FROM Filters')
    cities = cur.fetchall()
    j = {}

    for city in cities:
        cur.execute(f'SELECT item FROM Filters WHERE city = "{city[0]}"')
        items = list(set([i[0] for i in cur.fetchall()]))
        j[city[0]] = items

    with open('data.json', 'w', encoding='utf-8') as f:
        json.dump(j, f, ensure_ascii=False)


def add_watching(id, item, city, max_price, shop):
    cur.execute(f'SELECT * FROM Filters WHERE id = {id} AND item = "{item}" AND city = "{city}" AND shop = "{shop}"')
    items = cur.fetchall()
    if items:
        return False
    cur.execute(f'INSERT INTO Filters VALUES ({id}, "{item}", "{city}", {max_price}, "{shop}")')
    con.commit()
    send_json()
    return True


@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    await msg.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ, –∞ —Ç–∞–∫–∂–µ –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–ΩüòÅ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æüòâ!', reply_markup=main_kb)
    users[msg['from']['id']] = ['', '', '', None]


@dp.message_handler()
async def handler(msg: types.Message):
    await send_notifications()

    id, tx = msg['from'].id, msg.text

    if id not in users:
        await send_welcome(msg)
        return

    user = users[id]

    if user[0] == 'city':
        city = find_similar(tx)
        if city == False:
            await msg.answer('–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥üò≠. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üòâ!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
        elif city == True:
            if tx.lower() in dns_cities:
                await msg.answer('–ö–∞–∫—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –≤—ã –∏—â–∏—Ç–µüôÉ?\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
                user[0] = 'item'
                user[2] = tx.lower()
            else:
                await msg.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤üò≠!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
        else:
            await msg.answer(f'–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏: {cities_orig[cities.index(city)]}\nü§®?\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start', reply_markup=guessed_city_kb)
            user[2] = city.lower()

    elif user[0] == 'item':
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É –ø—Ä–≤–µ—Ä—è—Ç—åüòâ!', reply_markup=shops_kb(SHOPS))
        user[3] = [shop[:] for shop in SHOPS]
        user[1] = tx

    elif user[0] == 'max_price':
        if set(tx) <= set('0123456789') and int(tx) < 10000000:
            wrong = total = 0
            for i in user[3]:
                if i[2]:
                    total += 1
                    if not add_watching(id, user[1], user[2], int(tx), i[1]):
                        wrong += 1
            if wrong == total:
                # –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
                await msg.answer('–í—ã —É–∂–µ –¥–æ–±–æ–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏üò†!')
            else:
                if wrong > 0:
                    # –ß–∞—Å—Ç—å –∫–∞—Ä—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å
                    await msg.answer('–ß–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ —Å—Ç–∞–ª –∏—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å.\n–ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ãüòâ!')
                await msg.answer('–Ø –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫–∏ –≤–∞—à–µ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ãüòâ!')
            users[id] = ['', '', '', None]
        else:
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—åüò†!')

    elif tx == '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ':
        await msg.answer('–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–∏—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É (–∏–ª–∏ –±–ª–∏–∂–∞—à–∏–π –∫—Ä—É–ø–Ω—ã–π –∫ –≤–∞–º)ü§ó!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
        users[msg['from']['id']] = ['city', '', '', None]

    elif tx == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ':
        cur.execute(f'SELECT * FROM Filters WHERE id = {id}')
        watchlist = cur.fetchall()
        await msg.answer('–í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æüòú!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æüòú!', reply_markup=watchlist_kb(watchlist))


@dp.callback_query_handler()
async def handle_callback(query: types.CallbackQuery):
    id = query.from_user.id
    user = users[id]

    if query.data == 'max_price_question_yes':
        await bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—Éc—Ç–∏–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —Ä—É–±–ª—è—Ö)üòé!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
        user[0] = 'max_price'
        await query.answer()

    elif query.data == 'max_price_question_no':
        wrong = total = 0
        for i in user[3]:
            if i[2]:
                total += 1
                if not add_watching(id, user[1], user[2], 1000000000, i[1]):
                    wrong += 1
        if wrong == total:
            # –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
            await bot.send_message(id, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æüòù!')
        else:
            if wrong > 0:
                # –ß–∞—Å—Ç—å –∫–∞—Ä—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å
                await bot.send_message(id, '–ß–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ —Å—Ç–∞–ª –∏—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—åüòé!\n–ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ãüòù!')
            await bot.send_message(id, '–ú—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫–∏ –≤–∞—à–µ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ãüôÇ!')
        users[id] = ['', '', '', None]

    elif query.data == 'guessed_city_yes':
        if user[2].lower() in dns_cities:
            await bot.send_message(id, '–ö–∞–∫—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –≤—ã –∏—â–∏—Ç–µü§®?\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
            user[0] = 'item'
        else:
            await bot.send_message(id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤üò≠!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')

    elif query.data == 'guessed_city_no':
        await bot.send_message(id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üòù!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start')
        user[2] = ''

    elif query.data == 'shops_continue':
        await bot.edit_message_text('–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ãü§®?\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start', id, query.message.message_id, reply_markup=max_price_question_kb)
        user[0] = ''

    elif query.data.startswith('shops_'):
        shop, status = query.data.split('_')[1:]
        for i in range(len(user[3])):
            if user[3][i][1] == shop:
                user[3][i][2] = not user[3][i][2]
                break
        await bot.edit_message_reply_markup(id, query.message.message_id, reply_markup=shops_kb(user[3]))

    elif query.data.startswith('remove_'):
        d = 'confirm_' + query.data
        item = query.data.split('_')
        item[0] = id
        item[3] = int(item[3])
        if item[3] == 1000000000:
            text = f'{item[1]} ‚Äî [{SHOP_NAMES[item[4]]}, {cities_orig[cities.index(item[2])]}]'
        else:
            text = f'{item[1]} ‚Äî [{SHOP_NAMES[item[4]]}, {cities_orig[cities.index(item[2])]}, {item[3]}—Ä.]'
        await bot.edit_message_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Äü§®?\n{text}', id, query.message.message_id, reply_markup=confirm_remove_kb(d))

    elif query.data.startswith('confirm_remove_'):
        item = query.data.split('_')[1:]
        item[0] = id
        item[3] = int(item[3])
        cur.execute(f'DELETE FROM Filters WHERE id = {item[0]} AND item = "{item[1]}" AND max_price = {item[3]} AND city = "{item[2]}" AND shop = "{item[4]}"')
        con.commit()
        cur.execute(f'SELECT * FROM Filters WHERE id = {id}')
        watchlist = cur.fetchall()
        await bot.edit_message_text('–í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æüòú!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æüòú!', id, query.message.message_id, reply_markup=watchlist_kb(watchlist))
        await bot.send_message(id, '–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω!')

    elif query.data.startswith('cancel_remove'):
        cur.execute(f'SELECT * FROM Filters WHERE id = {id}')
        watchlist = cur.fetchall()
        await bot.edit_message_text('–í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æüòú!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æüòú!', id, query.message.message_id, reply_markup=watchlist_kb(watchlist))

    await query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
